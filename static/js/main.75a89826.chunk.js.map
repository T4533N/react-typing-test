{"version":3,"sources":["hooks/useKeyPress.js","utils/words.js","utils/time.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","generate","count","Array","fill","map","_","faker","random","word","join","currentTime","Date","getTime","initialWords","App","isTab","useMediaQuery","query","leftPadding","setLeftPadding","outgoingChars","setOutgoingChars","charAt","currentChar","setCurrentChar","incorrect","setIncorrect","errors","setErrors","substr","incomingChars","setIncomingChars","startTime","setStartTime","wordCount","setWordCount","console","log","wpm","setWpm","accuracy","setAccuracy","typedChars","setTypedChars","updatedOutgoingChars","updatedIncomingChars","substring","split","durationInMinutes","toFixed","r","updatedTypedChars","className","src","logo","alt","slice","href","target","rel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"wNAkCeA,EA/BK,SAAAC,GAAY,MAEMC,qBAFN,mBAEvBC,EAFuB,KAEXC,EAFW,KA4B9B,OAxBAC,qBAAU,WAER,IAAMC,EAAc,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACjBJ,IAAeI,GAAsB,IAAfA,EAAIC,SAC5BJ,EAAcG,GACdN,GAAYA,EAASM,KAInBE,EAAY,WAChBL,EAAc,OAOhB,OAHAM,OAAOC,iBAAiB,UAAWL,GACnCI,OAAOC,iBAAiB,QAASF,GAE1B,WAELC,OAAOE,oBAAoB,UAAWN,GACtCI,OAAOE,oBAAoB,QAASH,OAIjCN,G,gBC7BIU,EAAW,WAAiB,IAAhBC,EAAe,uDAAP,GAC/B,OAAO,IAAIC,MAAMD,GACdE,OACAC,KAAI,SAAAC,GAAC,OAAIC,IAAMC,OAAOC,UACtBC,KAAK,MCNGC,EAAc,kBAAM,IAAIC,MAAOC,W,OCStCC,G,QAAeb,KA2GNc,MAzGf,WACE,IAAMC,EAAQC,wBAAc,CAAEC,MAAO,uBADxB,EAGyB5B,mBACpC,IAAIa,MAAM,IAAIC,KAAK,KAAKM,KAAK,KAJlB,mBAGNS,EAHM,KAGOC,EAHP,OAM6B9B,mBAAS,IANtC,mBAMN+B,EANM,KAMSC,EANT,OAOyBhC,mBAASwB,EAAaS,OAAO,IAPtD,mBAONC,EAPM,KAOOC,EAPP,OAQqBnC,oBAAS,GAR9B,mBAQNoC,EARM,KAQKC,EARL,OASerC,mBAAS,GATxB,mBASNsC,EATM,KASEC,EATF,OAU6BvC,mBAASwB,EAAagB,OAAO,IAV1D,mBAUNC,EAVM,KAUSC,EAVT,OAYqB1C,qBAZrB,mBAYN2C,EAZM,KAYKC,EAZL,OAaqB5C,mBAAS,GAb9B,mBAaN6C,EAbM,KAaKC,EAbL,KAcbC,QAAQC,IAAIH,GAdC,MAeS7C,mBAAS,GAflB,mBAeNiD,EAfM,KAeDC,EAfC,OAiBmBlD,mBAAS,GAjB5B,mBAiBNmD,EAjBM,KAiBIC,EAjBJ,OAkBuBpD,mBAAS,IAlBhC,mBAkBNqD,EAlBM,KAkBMC,EAlBN,KA8Db,OA1CAxD,GAAY,SAACO,GACNsC,GACHC,EAAavB,KAGf,IAAIkC,EAAuBxB,EACvByB,EAAuBf,EAC3B,GAAIpC,IAAQ6B,GAgBV,GAfAG,GAAa,GACTR,EAAYvB,OAAS,GACvBwB,EAAeD,EAAY4B,UAAU,IAGvCzB,EADAuB,GAAwBrB,GAGxBC,EAAeM,EAAcR,OAAO,KAEpCuB,EAAuBf,EAAcgB,UAAU,IACtBC,MAAM,KAAKpD,OAAS,KAC3CkD,GAAwB,IAAM7C,KAEhC+B,EAAiBc,GAEe,MAA5Bf,EAAcR,OAAO,GAAY,CACnCa,EAAaD,EAAY,GACzB,IAAMc,GAAqBtC,IAAgBsB,GAAa,IACxDO,IAASL,EAAY,GAAKc,GAAmBC,QAAQ,UAGvDrB,GAAU,SAACsB,GAAD,OAAOA,EAAI,KACrBxB,GAAa,GAGf,IAAMyB,EAAoBT,EAAahD,EACvCiD,EAAcQ,GACdV,GACkC,IAA9BG,EAAqBjD,OAAgBwD,EAAkBxD,QAAQsD,QAC/D,OAKFlC,EACK,yBAAKqC,UAAU,OAAf,uCAIP,yBAAKA,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,uBAAGH,UAAU,aACX,0BAAMA,UAAU,kBACZlC,EAAcE,GAAeoC,OAAO,KAExC,0BACEJ,UAAS,4BACP3B,EAAY,sBAAwB,sBAGrCF,GAEH,8BAAOO,EAAcD,OAAO,EAAG,MAEjC,oCACQS,EADR,WACqBE,EADrB,WACuC,IACrC,0BAAMY,UAAW3B,EAAY,kBAAoB,WAC9CE,GACK,IAJV,UAKUP,EAAczB,OALxB,aAK0CuC,GAE1C,8BACE,uBACEkB,UAAU,WACVK,KAAK,6CACLC,OAAO,SACPC,IAAI,uBAJN,cC1FUC,QACW,cAA7B/D,OAAOgE,SAASC,UAEe,UAA7BjE,OAAOgE,SAASC,UAEhBjE,OAAOgE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,uCEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.75a89826.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n//1\nconst useKeyPress = callback => {\n  //2\n  const [keyPressed, setKeyPressed] = useState();\n  //3\n  useEffect(() => {\n    //4\n    const downHandler = ({ key }) => {\n      if (keyPressed !== key && key.length === 1) {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n    //5\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    //6\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      //7\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  //8\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","import faker from 'faker';\n\nexport const generate = (count = 10) => {\n  return new Array(count)\n    .fill()\n    .map(_ => faker.random.word())\n    .join(' ');\n};\n","export const currentTime = () => new Date().getTime();\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport useKeyPress from './hooks/useKeyPress';\nimport { generate } from './utils/words';\nimport { currentTime } from './utils/time';\nimport { useMediaQuery } from 'react-responsive';\n\nimport './App.css';\n\nconst initialWords = generate();\n\nfunction App() {\n  const isTab = useMediaQuery({ query: '(max-width: 600px)' });\n\n  const [leftPadding, setLeftPadding] = useState(\n    new Array(20).fill(' ').join(''),\n  );\n  const [outgoingChars, setOutgoingChars] = useState('');\n  const [currentChar, setCurrentChar] = useState(initialWords.charAt(0));\n  const [incorrect, setIncorrect] = useState(false);\n  const [errors, setErrors] = useState(0);\n  const [incomingChars, setIncomingChars] = useState(initialWords.substr(1));\n\n  const [startTime, setStartTime] = useState();\n  const [wordCount, setWordCount] = useState(0);\n  console.log(wordCount);\n  const [wpm, setWpm] = useState(0);\n\n  const [accuracy, setAccuracy] = useState(0);\n  const [typedChars, setTypedChars] = useState('');\n\n  useKeyPress((key) => {\n    if (!startTime) {\n      setStartTime(currentTime());\n    }\n\n    let updatedOutgoingChars = outgoingChars;\n    let updatedIncomingChars = incomingChars;\n    if (key === currentChar) {\n      setIncorrect(false);\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1));\n      }\n      updatedOutgoingChars += currentChar;\n      setOutgoingChars(updatedOutgoingChars);\n\n      setCurrentChar(incomingChars.charAt(0));\n\n      updatedIncomingChars = incomingChars.substring(1);\n      if (updatedIncomingChars.split(' ').length < 10) {\n        updatedIncomingChars += ' ' + generate();\n      }\n      setIncomingChars(updatedIncomingChars);\n\n      if (incomingChars.charAt(0) === ' ') {\n        setWordCount(wordCount + 1);\n        const durationInMinutes = (currentTime() - startTime) / 60000.0;\n        setWpm(((wordCount + 1) / durationInMinutes).toFixed(2));\n      }\n    } else {\n      setErrors((r) => r + 1);\n      setIncorrect(true);\n    }\n\n    const updatedTypedChars = typedChars + key;\n    setTypedChars(updatedTypedChars);\n    setAccuracy(\n      ((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(\n        2,\n      ),\n    );\n  });\n\n  if (isTab) {\n    return <div className=\"Tab\">Isn't supported for mobile devices.</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"Character\">\n          <span className=\"Character-out\">\n            {(leftPadding + outgoingChars).slice(-20)}\n          </span>\n          <span\n            className={`Character-current ${\n              incorrect ? 'Incorrect-character' : 'correct-character'\n            }`}\n          >\n            {currentChar}\n          </span>\n          <span>{incomingChars.substr(0, 20)}</span>\n        </p>\n        <h3>\n          WPM: {wpm} | ACC: {accuracy}% | Err:{' '}\n          <span className={incorrect ? 'error-animation' : 'success'}>\n            {errors}\n          </span>{' '}\n          | CPM: {outgoingChars.length} | Words: {wordCount}\n        </h3>\n        <span>\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/taingmeng/typing-frenzy\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Github\n          </a>\n        </span>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}